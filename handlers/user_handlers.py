from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from utils.data_loader import load_tasks
from utils.progress_manager import add_solved_task, get_user_stats

router = Router()
tasks = load_tasks()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_state = {}

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------

def get_navigation_keyboard():
    kb = [
        [KeyboardButton(text="‚Üê"), KeyboardButton(text="‚Üí")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_continue_keyboard():
    kb = [
        [KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"), KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ç–∏–ø")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def normalize_answer(ans: str):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É (18 == 18.0)"""
    ans = ans.strip().lower().replace(',', '.')
    try:
        return str(float(ans))
    except ValueError:
        return ans

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ.\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –æ—Ç 1 –¥–æ 27, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "üìò –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 27 ‚Äî —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ï–ì–≠.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚û°Ô∏è –õ–∏—Å—Ç–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏\n"
        "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç\n"
        "‚ùå –ù–∞–∂–∞—Ç—å '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(Command("stats"))
async def stats_cmd(message: types.Message):
    stats = get_user_stats(message.from_user.id)
    if not stats:
        await message.answer("üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    total = sum(stats.values())
    text = "üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
    for k, v in sorted(stats.items(), key=lambda x: int(x[0])):
        text += f"–ó–∞–¥–∞–Ω–∏–µ {k}: {v} ‚úÖ\n"
    text += f"\n–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ: {total} –∑–∞–¥–∞—á üí™"
    await message.answer(text)

# ---------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ----------

@router.message(F.text.in_([str(i) for i in range(1, 28)]))
async def select_task(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∞ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if user_id in user_state and "task_number" in user_state[user_id]:
        await check_answer(message)
        return

    if text not in tasks:
        await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç üòî")
        return

    user_state[user_id] = {"task_number": text, "index": 0}
    question = tasks[text][0]["question"]

    await message.answer(f"üìò {question}", reply_markup=get_navigation_keyboard())

@router.message(F.text == "‚Üí")
async def next_task(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è (1‚Äì27).")
        return

    state = user_state[user_id]
    task_number = state["task_number"]
    state["index"] = (state["index"] + 1) % len(tasks[task_number])
    question = tasks[task_number][state["index"]]["question"]

    await message.answer(f"üìò {question}", reply_markup=get_navigation_keyboard())

@router.message(F.text == "‚Üê")
async def prev_task(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è (1‚Äì27).")
        return

    state = user_state[user_id]
    task_number = state["task_number"]
    state["index"] = (state["index"] - 1) % len(tasks[task_number])
    question = tasks[task_number][state["index"]]["question"]

    await message.answer(f"üìò {question}", reply_markup=get_navigation_keyboard())

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_task(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 27:", reply_markup=ReplyKeyboardRemove())

@router.message(F.text.in_(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–°–º–µ–Ω–∏—Ç—å —Ç–∏–ø"]))
async def continue_or_change(message: types.Message):
    user_id = message.from_user.id

    if message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        state = user_state.get(user_id)
        if not state:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ.")
            return
        task_number = state["task_number"]
        question = tasks[task_number][state["index"]]["question"]
        await message.answer(f"üìò {question}", reply_markup=get_navigation_keyboard())
    else:
        user_state.pop(user_id, None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (1‚Äì27):", reply_markup=ReplyKeyboardRemove())

@router.message()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_state:
        await message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –æ—Ç 1 –¥–æ 27, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    state = user_state[user_id]
    task_number = state["task_number"]
    index = state["index"]
    correct_answers = [normalize_answer(a) for a in tasks[task_number][index]["answers"]]
    user_answer = normalize_answer(message.text)

    if user_answer in correct_answers:
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å—ë –≤–µ—Ä–Ω–æ!", reply_markup=get_continue_keyboard())
        add_solved_task(user_id, task_number)
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ü§î", reply_markup=get_navigation_keyboard())